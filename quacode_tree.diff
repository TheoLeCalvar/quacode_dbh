diff -urN ./quacode/qint/branch/view-values.hpp ./quacode/qint/branch/view-values.hpp
--- ./quacode/qint/branch/view-values.hpp	1970-01-01 01:00:00.000000000 +0100
+++ ./quacode/qint/branch/view-values.hpp	2015-04-08 09:45:24.085721616 +0200
@@ -0,0 +1,259 @@
+/* -*- mode: C++; c-basic-offset: 2; indent-tabs-mode: nil -*- */
+/*
+ *  Main authors:
+ *     Vincent Barichard <Vincent.Barichard@univ-angers.fr>
+ *
+ *  Copyright:
+ *     Vincent Barichard, 2013
+ *
+ *  Last modified:
+ *     $Date$ by $Author$
+ *     $Revision$
+ *
+ *  This file is part of Quacode:
+ *     http://quacode.barichard.com
+ *
+ *  Permission is hereby granted, free of charge, to any person obtaining
+ *  a copy of this software and associated documentation files (the
+ *  "Software"), to deal in the Software without restriction, including
+ *  without limitation the rights to use, copy, modify, merge, publish,
+ *  distribute, sublicense, and/or sell copies of the Software, and to
+ *  permit persons to whom the Software is furnished to do so, subject to
+ *  the following conditions:
+ *
+ *  The above copyright notice and this permission notice shall be
+ *  included in all copies or substantial portions of the Software.
+ *
+ *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+ *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+ *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+ *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ *
+ */
+#include <gecode/int/branch.hh>
+#include <sibus/receivers/receiver-gecode.hh>
+#define UNUSED_STREAM std::cout
+
+namespace Gecode { namespace Int { namespace Branch {
+
+  /**
+   * \brief %QBrancher by view and values selection
+   *
+   */
+  template<int n, bool min>
+  class QViewValuesOrderBrancher : public ViewValuesBrancher<n,min> {
+    typedef typename ViewBrancher<IntView,n>::BranchFilter BranchFilter;
+  protected:
+    using ViewBrancher<IntView,n>::x;
+    using ViewBrancher<IntView,n>::start;
+    /// Information about value and order to deal with this value
+    class ValOrder {
+    public:
+      int v;
+      unsigned int o;
+      ValOrder(int _v, unsigned int _o) : v(_v), o(_o) {}
+    };
+    /// Offset of the brancher
+    int offset;
+    /// Receiver connected to DataBus
+    ReceiverGecode& receiver;
+    /// Description of domains parse order of the variables involved in the brancher
+    SharedArray< std::vector<ValOrder> > domainsParseOrder;
+    /// Constructor for cloning \a b
+    QViewValuesOrderBrancher(Space& home, bool shared, QViewValuesOrderBrancher& b);
+    /// Constructor for creation
+    QViewValuesOrderBrancher(Home home, ReceiverGecode& _receiver, ViewArray<IntView>& x, int _offset,
+                             ViewSel<IntView>* vs[n], BranchFilter bf, IntVarValPrint vvp);
+  public:
+    /// Return choice
+    virtual const Choice* choice(Space& home);
+    /// Return choice
+    virtual const Choice* choice(const Space& home, Archive& e);
+    /// Perform commit for choice \a c and alternative \a a
+    virtual ExecStatus commit(Space& home, const Choice& c, unsigned int a);
+    /// Perform cloning
+    virtual Actor* copy(Space& home, bool share);
+    /// Delete brancher and return its size
+    virtual size_t dispose(Space& home);
+    /// Constructor for creation
+    static BrancherHandle post(Home home, ReceiverGecode& receiver, ViewArray<IntView>& x, int offset,
+                               ViewSel<IntView>* vs[n], BranchFilter bf, IntVarValPrint vvp);
+  };
+
+  /// %QChoice storing position and values for integer quantified views. Order of values
+  /// is stored in a array such as it can be parse in a home made way.
+  class GECODE_VTABLE_EXPORT QPosValuesOrderChoice : public PosValuesChoice {
+  protected:
+    /// The order of the alternatives to parse the domain in a customize way
+    std::vector<unsigned int> parseOrder;
+  public:
+    /// Initialize choice for brancher \a b, position \a p and view \a x
+    QPosValuesOrderChoice(const Brancher& b, const Pos& p, const std::vector<unsigned int>& parseOrder, IntView x);
+    /// Initialize choice for brancher \a b from archive \a e
+    QPosValuesOrderChoice(const Brancher& b, unsigned int alt, Pos p, Archive& e);
+    /// Return value to branch with for alternative \a a
+    int val(unsigned int a) const;
+    /// Report size occupied
+    virtual size_t size(void) const;
+    /// Deallocate
+    virtual ~QPosValuesOrderChoice(void);
+    /// Archive into \a e
+    virtual void archive(Archive& e) const;
+  };
+
+  forceinline int
+  QPosValuesOrderChoice::val(unsigned int a) const {
+    return PosValuesChoice::val(parseOrder[a]);
+  }
+
+  // ---------------------------------------
+  // QViewValuesOrderBrancher
+  // ---------------------------------------
+
+  template<int n, bool min>
+  forceinline
+  QViewValuesOrderBrancher<n,min>::
+  QViewValuesOrderBrancher(Home home, ReceiverGecode& _receiver, ViewArray<IntView>& x, int _offset,
+                      ViewSel<IntView>* vs[n], BranchFilter bf, IntVarValPrint vvp0)
+    : ViewValuesBrancher<n,min>(home,x,vs,bf,vvp0), offset(_offset), receiver(_receiver) {
+    home.notice(*this,AP_DISPOSE);
+    domainsParseOrder.init(x.size());
+    receiver.setNbVars(offset + x.size());
+    for (int i=0; i < x.size(); i++) {
+      unsigned int k = 0;
+      std::vector<TVal> domain;
+      assert(x[i].range());
+      for (int j=x[i].min(); j <= x[i].max(); j++, k++) {
+        domainsParseOrder[i].push_back(ValOrder(j,k));
+        domain.push_back(TVal(j));
+      }
+      SIBus::instance().sendDomainDescription(i+offset,domain);
+    }
+  }
+
+  template<int n, bool min>
+  BrancherHandle
+  QViewValuesOrderBrancher<n,min>::post(Home home, ReceiverGecode& receiver, ViewArray<IntView>& x, int offset,
+                                         ViewSel<IntView>* vs[n],
+                                         BranchFilter bf, IntVarValPrint vvp) {
+    return *new (home) QViewValuesOrderBrancher<n,min>(home,receiver,x,offset,vs,bf,vvp);
+  }
+
+  template<int n, bool min>
+  forceinline
+  QViewValuesOrderBrancher<n,min>::
+  QViewValuesOrderBrancher(Space& home, bool shared, QViewValuesOrderBrancher& b)
+     : ViewValuesBrancher<n,min>(home,shared,b), offset(b.offset), receiver(b.receiver) {
+    domainsParseOrder.update(home,shared,b.domainsParseOrder);
+  }
+
+  template<int n, bool min>
+  Actor*
+  QViewValuesOrderBrancher<n,min>::copy(Space& home, bool shared) {
+    return new (home) QViewValuesOrderBrancher<n,min>(home,shared,*this);
+  }
+
+  forceinline bool orderTest(Tuple i, Tuple j) { return (i.v2 < j.v2); }
+
+  template<int n, bool min>
+  const Choice*
+  QViewValuesOrderBrancher<n,min>::choice(Space& home) {
+    Pos p = this->pos(home);
+    while (!receiver.emptySwapRequestFor(offset + p.pos)) {
+      Tuple t = receiver.frontSwapRequestFor(offset + p.pos);
+      unsigned int k = domainsParseOrder[p.pos][t.v1].o;
+      domainsParseOrder[p.pos][t.v1].o = domainsParseOrder[p.pos][t.v2].o;
+      domainsParseOrder[p.pos][t.v2].o = k;
+      receiver.popSwapRequestFor(offset + p.pos);
+      SIBus::instance().sendSwapDone(offset + p.pos,t.v1,t.v2);
+    }
+
+    std::vector<Tuple> alternativeAndOrder;
+    ViewValues<IntView> vv(ViewBrancher<IntView,n>::view(p));
+    typename std::vector<ValOrder>::const_iterator it = domainsParseOrder[p.pos].begin();
+    unsigned int i = 0;
+    while (vv()) {
+      assert(it != domainsParseOrder[p.pos].end());
+      for ( ; (*it).v != vv.val() ; ++it );
+      alternativeAndOrder.push_back(Tuple(i,(*it).o));
+      ++i; ++vv;
+    }
+    std::sort(alternativeAndOrder.begin(), alternativeAndOrder.end(), orderTest);
+    std::vector<unsigned int> parseOrder;
+    typename std::vector<Tuple>::const_iterator it2    = alternativeAndOrder.begin();
+    typename std::vector<Tuple>::const_iterator it2End = alternativeAndOrder.end();
+    for ( ; it2 != it2End; ++it2 ) parseOrder.push_back((*it2).v1);
+
+    return new QPosValuesOrderChoice(*this,p,parseOrder,
+                                     ViewBrancher<IntView,n>::view(p));
+  }
+
+  template<int n, bool min>
+  const Choice*
+  QViewValuesOrderBrancher<n,min>::choice(const Space& home, Archive& e) {
+    (void) home;
+    int p;
+    unsigned int a;
+    e >> p >> a;
+    return new QPosValuesOrderChoice(*this,a,p,e);
+  }
+
+  template<int n, bool min>
+  ExecStatus
+  QViewValuesOrderBrancher<n,min>::commit(Space& home, const Choice& c, unsigned int a) {
+    const QPosValuesOrderChoice& pvc
+      = static_cast<const QPosValuesOrderChoice&>(c);
+    IntView x(ViewBrancher<IntView,n>::view(pvc.pos()));
+    unsigned int b = min ? a : (pvc.alternatives() - 1 - a);
+    return me_failed(x.eq(home,pvc.val(b))) ? ES_FAILED : ES_OK;
+  }
+
+  template<int n, bool min>
+  forceinline size_t
+  QViewValuesOrderBrancher<n,min>::dispose(Space& home) {
+    home.ignore(*this,AP_DISPOSE);
+    domainsParseOrder.~SharedArray();
+    ViewValuesBrancher<n,min>::dispose(home);
+    return sizeof(*this);
+  }
+
+  forceinline
+  QPosValuesOrderChoice::QPosValuesOrderChoice(const Brancher& b, const Pos& p, const std::vector<unsigned int>& _parseOrder, IntView x)
+    : PosValuesChoice(b,p,x), parseOrder(_parseOrder)
+  {
+    assert( this->alternatives() == parseOrder.size() );
+  }
+
+  forceinline
+  QPosValuesOrderChoice::QPosValuesOrderChoice(const Brancher& b, unsigned int a, Pos p,
+                                               Archive& e)
+    : PosValuesChoice(b,a,p,e) {
+    int dpoSize = 0;
+    e >> dpoSize;
+    parseOrder.resize(dpoSize);
+    for (int i=0; i < dpoSize; i++) e >> parseOrder[i];
+  }
+
+  forceinline size_t
+  QPosValuesOrderChoice::size(void) const {
+    return PosValuesChoice::size() + sizeof(QPosValuesOrderChoice) - sizeof(PosValuesChoice);
+  }
+
+  forceinline
+  QPosValuesOrderChoice::~QPosValuesOrderChoice(void) {
+  }
+
+  forceinline void
+  QPosValuesOrderChoice::archive(Archive& e) const {
+    PosValuesChoice::archive(e);
+    int dpoSize = (int)parseOrder.size();
+    e << dpoSize;
+    for (int i=0; i < dpoSize; i++) e << parseOrder[i];
+  }
+
+}}}
+
+// STATISTICS: int-branch
diff -urN ./quacode/qspaceinfo.cpp ./quacode/qspaceinfo.cpp
--- ./quacode/qspaceinfo.cpp	2015-04-08 09:48:23.511125429 +0200
+++ ./quacode/qspaceinfo.cpp	2015-04-08 09:45:24.085721616 +0200
@@ -469,4 +469,67 @@
   template QUACODE_EXPORT std::vector<BrancherHandle> QSpaceInfo::branch<>(Home home, const IntVarArgs& x, IntVarBranch vars, IntValBranch vals, IntBranchFilter bf, IntVarValPrint vvp);
   template QUACODE_EXPORT std::vector<BrancherHandle> QSpaceInfo::branch<>(Home home, const IntVarArgs& x, TieBreak<IntVarBranch> vars, IntValBranch vals, IntBranchFilter bf, IntVarValPrint vvp);
 
+#ifdef SIBUS_THREAD
+  std::vector<BrancherHandle>
+  QSpaceInfo::branch(Home home, ReceiverGecode& receiver, const IntVar& x, IntVarBranch vars, IntBranchFilter bf) {
+    IntVarArgs vaX;
+    vaX << x;
+    return branch(home,receiver,vaX,vars,bf);
+  }
+
+  std::vector<BrancherHandle>
+  QSpaceInfo::branch(Home home, ReceiverGecode& receiver, const IntVarArgs& x, IntVarBranch vars, IntBranchFilter bf) {
+    std::vector<BrancherHandle> result;
+    assert(x.size() > 0);
+    if (home.failed()) return result;
+
+    // Get the quantifier of the first variable of the quantifier
+    TQuantifier curQ = EXISTS;
+    if (unWatched(x[0])) curQ = FORALL;
+    int i = 0;
+    // We iterate over blocks of variables with the same quantifier
+    while (i < x.size()) {
+      IntVarArgs UW_X;
+      IntVar* uwxi = NULL;
+      TQuantifier qi = EXISTS;
+
+      while (i < x.size())
+      {
+        uwxi = unWatched(x[i]);
+        qi = (uwxi?FORALL:EXISTS);
+
+        if (qi != curQ) break; // End of current block go branching
+        if (qi == EXISTS)
+          UW_X << x[i];
+        else
+          UW_X << *uwxi;
+
+        i++;
+      }
+
+      // Add brancher for unwatched variables
+      using namespace Int;
+      vars.expand(home,UW_X);
+      ViewArray<IntView> xv(home,UW_X);
+      ViewSel<IntView>* vs[1] = {
+        Branch::viewselint(home,vars)
+      };
+      int lastBrancherId = sharedInfo.getLastBrancherId();
+      int offSet = 0;
+      if (lastBrancherId) offSet = sharedInfo.brancherOffset(lastBrancherId) + sharedInfo.brancherSize(lastBrancherId);
+      BrancherHandle bh = Branch::QViewValuesOrderBrancher<1,true>::post(home,receiver,xv,offSet,vs,bf,&doubleChoice);
+
+      // Update shared info
+      updateQSpaceInfo(bh,curQ,UW_X);
+
+      result.push_back(bh);
+
+      // Update current quantifier
+      curQ = qi;
+    }
+
+    return result;
+  }
+
+#endif
 }
diff -urN ./quacode/qspaceinfo.hh ./quacode/qspaceinfo.hh
--- ./quacode/qspaceinfo.hh	2015-04-08 09:48:23.511125429 +0200
+++ ./quacode/qspaceinfo.hh	2015-04-08 09:45:24.085721616 +0200
@@ -39,6 +39,7 @@
 #include <iomanip>
 #include <quacode/qcsp.hh>
 #include <vector>
+#include <sibus/receivers/receiver-gecode.hh>
 
 namespace Gecode {
   // Forward declaration
@@ -414,6 +415,8 @@
       void add(const QSpaceInfo& qsi, const BrancherHandle& bh, TQuantifier _q, const IntVarArgs& x);
       /// Return the quantifier used for the brancher \a bh
       forceinline TQuantifier brancherQuantifier(unsigned int id) const { return v[id-1].quantifier; }
+      /// Return the size used for the brancher \a bh
+      forceinline unsigned int brancherSize(const unsigned int id) const { return v[id-1].size; }
       /// Return the offset computed when the brancher \a bh was added
       forceinline unsigned int brancherOffset(const unsigned int id) const { return v[id-1].offset; }
       // Return the last id of brancher stored in Shared Info.
@@ -454,6 +457,8 @@
         /// SharedInfo access
         /// Return the quantifier used for the brancher \a id
         TQuantifier brancherQuantifier(unsigned int id) const;
+        /// Return the size computed when the brancher \a id was added
+        unsigned int brancherSize(unsigned int id) const;
         /// Return the offset computed when the brancher \a id was added
         unsigned int brancherOffset(unsigned int id) const;
         /// Initialize data structures of strategy, may return another method if strategy can't be allocated with given method
@@ -596,10 +601,15 @@
     /// Branch over integer variables \a x, quantified variable selection \a vars and value selection \a vals
     template <class BranchType> QUACODE_EXPORT std::vector<BrancherHandle> branch(Home home, const IntVarArgs& x, BranchType vars, IntValBranch vals, IntBranchFilter bf=NULL, IntVarValPrint vvp=NULL);
 
+    /// Branch over integer variable \a x, quantified variable selection \a vars. This function must be used with a Gecode Receiver (for SIBus)
+    QUACODE_EXPORT std::vector<BrancherHandle> branch(Home home, ReceiverGecode& receiver, const IntVar& x, IntVarBranch vars, IntBranchFilter bf=NULL);
+    /// Branch over integer variables \a x, quantified variable selection \a vars. This function must be used with a Gecode Receiver (for SIBus)
+    QUACODE_EXPORT std::vector<BrancherHandle> branch(Home home, ReceiverGecode& receiver, const IntVarArgs& x, IntVarBranch vars, IntBranchFilter bf=NULL);
   };
 }
 
 #include <quacode/qspaceinfo.hpp>
 #include <quacode/qint/watch.hpp>
+#include <quacode/qint/branch/view-values.hpp>
 
 #endif
diff -urN ./quacode/qspaceinfo.hpp ./quacode/qspaceinfo.hpp
--- ./quacode/qspaceinfo.hpp	2015-04-08 09:48:23.511125429 +0200
+++ ./quacode/qspaceinfo.hpp	2015-04-08 09:45:24.085721616 +0200
@@ -587,6 +587,11 @@
   }
 
   forceinline unsigned int
+  QSpaceInfo::QSpaceSharedInfo::brancherSize(unsigned int id) const {
+    return static_cast<QSpaceSharedInfoO*>(object())->brancherSize(id);
+  }
+
+  forceinline unsigned int
   QSpaceInfo::QSpaceSharedInfo::brancherOffset(unsigned int id) const {
     return static_cast<QSpaceSharedInfoO*>(object())->brancherOffset(id);
   }
@@ -645,19 +650,23 @@
 
   forceinline void
   QSpaceInfo::strategySuccess(void) {
+    SIBus::instance().sendSuccess();
   }
 
   forceinline void
   QSpaceInfo::strategyFailed(void) {
+    SIBus::instance().sendGlobalFailure();
   }
 
   forceinline void
   QSpaceInfo::scenarioSuccess(void) {
+    eventNewInstance();
     if (bRecordStrategy) sharedInfo.scenarioSuccess(*this);
   }
 
   forceinline void
   QSpaceInfo::scenarioFailed(void) {
+    SIBus::instance().sendFailure();
     if (bRecordStrategy) sharedInfo.scenarioFailed();
   }
 
@@ -668,6 +677,10 @@
                                  std::ostream& ) {
     const QSpaceInfo& qsi = dynamic_cast<const QSpaceInfo&>(home);
     if (qsi.bRecordStrategy) const_cast<QSpaceInfo&>(qsi).sharedInfo.scenarioChoice(bh.id(),pos,x.min(),x.max());
+    if (x.assigned())
+      SIBus::instance().sendChoice(qsi.sharedInfo.brancherOffset(bh.id()) + pos,TVal(x.val()));
+    else
+      SIBus::instance().sendChoice(qsi.sharedInfo.brancherOffset(bh.id()) + pos,TVal(x.min(),x.max()));
   }
 
   template<> forceinline
@@ -695,6 +708,10 @@
                                  std::ostream& os) {
     const QSpaceInfo& qsi = dynamic_cast<const QSpaceInfo&>(home);
     if (qsi.bRecordStrategy) const_cast<QSpaceInfo&>(qsi).sharedInfo.scenarioChoice(bh.id(),pos,x.min(),x.max());
+    if (x.assigned())
+      SIBus::instance().sendChoice(qsi.sharedInfo.brancherOffset(bh.id()) + pos,TVal(x.val()));
+    else
+      SIBus::instance().sendChoice(qsi.sharedInfo.brancherOffset(bh.id()) + pos,TVal(x.min(),x.max()));
     runCustomChoice(home,bh,alt,x,pos,val,os);
   }
 
